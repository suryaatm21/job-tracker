name: Channel digest (2h)

on:
  schedule:
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      command:
        description: 'Which manual command to run'
        required: false
        default: 'digest'
        type: choice
        options:
          - digest
          - latest
          - today
          - recent
      count:
        description: 'Max items to include (digest) or N for recent'
        required: false
        default: '100'
      force_window_hours:
        description: 'Override WINDOW_HOURS for testing (e.g., 720 for 30 days)'
        required: false
        default: '720'
        type: string

permissions:
  contents: read

# Prevent overlapping runs that could cause cache conflicts
concurrency:
  group: channel-digest-${{ github.ref }}
  cancel-in-progress: false

env:
  TARGET_REPOS: '["SimplifyJobs/Summer2026-Internships","vanshb03/Summer2026-Internships"]'
  LISTINGS_PATH: '.github/scripts/listings.json'
  DATE_FIELD: 'date_posted'
  DATE_FALLBACK: 'date_updated'
  WINDOW_HOURS: '24' # 2 hours for regular digest
  SEEN_TTL_DAYS: '14' # Channel digest: longer TTL for less frequent updates
  STATE_DIR: '.state/channel-digest' # Separate state directory for channel digest

jobs:
  digest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install requests

      # Compute weekly cache key component (ISO year-week)
      - name: Compute ISO week key
        run: echo "ISO_WEEK=$(date -u +'%G-W%V')" >> $GITHUB_ENV

      # Use separate cache for channel digest TTL state
      - name: Restore channel digest state
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: .state/channel-digest
          key: channel-digest-state-v1-${{ env.ISO_WEEK }}-${{ github.run_id }}
          restore-keys: |
            channel-digest-state-v1-${{ env.ISO_WEEK }}-
            channel-digest-state-v1-

      - name: Run 4h digest to channel
        if: github.event_name == 'schedule' || github.event.inputs.command == 'digest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID_CHANNEL }}
          TARGET_REPOS: ${{ env.TARGET_REPOS }}
          LISTINGS_PATH: ${{ env.LISTINGS_PATH }}
          DATE_FIELD: ${{ env.DATE_FIELD }}
          DATE_FALLBACK: ${{ env.DATE_FALLBACK }}
          WINDOW_HOURS: ${{ env.WINDOW_HOURS }}
          SEEN_TTL_DAYS: ${{ env.SEEN_TTL_DAYS }}
          COUNT: ${{ github.event.inputs.count }}
          STATE_DIR: ${{ env.STATE_DIR }}
          FORCE_WINDOW_HOURS: ${{ github.event.inputs.force_window_hours }}
        run: python .github/scripts/send_digest_multi.py

      - name: Send latest listing to channel (manual runs only)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.command == 'latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID_CHANNEL }}
          TARGET_REPO: 'vanshb03/Summer2026-Internships'
          LISTINGS_PATH: ${{ env.LISTINGS_PATH }}
          MESSAGE_PREFIX: 'ðŸ“° Channel'
        run: python .github/scripts/send_latest_listing.py

      - name: Send today's listings to channel (manual runs only)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.command == 'today'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID_CHANNEL }}
          TARGET_REPO: 'vanshb03/Summer2026-Internships'
          LISTINGS_PATH: ${{ env.LISTINGS_PATH }}
          MESSAGE_PREFIX: 'ðŸ“° Channel'
        run: python .github/scripts/send_todays_listings.py

      - name: Send recent listings to channel (manual runs only)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.command == 'recent'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID_CHANNEL }}
          TARGET_REPO: 'vanshb03/Summer2026-Internships'
          LISTINGS_PATH: ${{ env.LISTINGS_PATH }}
          COUNT: ${{ github.event.inputs.count }}
          MESSAGE_PREFIX: 'ðŸ“° Channel'
        run: python .github/scripts/send_recent_listings.py

      # Save channel digest TTL state (separate from DM watcher)
      - name: Save channel digest state
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .state/channel-digest
          key: channel-digest-state-v1-${{ env.ISO_WEEK }}-${{ github.run_id }}
